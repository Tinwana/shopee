// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

//enum
enum Sex {
  MALE
  FEMAIL
  ORTHER
}

enum Role {
  ADMIN
  SELLER
  USER
}

enum Status {
  SUCCESS
  PENDING
  FAILURE
}

//model

model Promotion {
  id                 String     @id @default(uuid())
  name               String
  description        String?
  startDate          DateTime
  endDate            DateTime
  discountPercentage Float
  Product            Product[]
  category           Category[]
}

model Tag {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}

model Address {
  id           String  @id @default(uuid())
  country      Country @relation(fields: [country_id], references: [id])
  country_id   String
  city         String
  postalCode   String
  addressLine1 String
  addressLine2 String
  User         User[]
  Shop         Shop?
  Order        Order[]
}

model Country {
  id      String    @id @default(uuid())
  name    String
  Address Address[]
}

model User {
  id      String    @id @default(uuid())
  sex     Sex?
  email   String    @unique
  birth   DateTime?
  address Address[]
  Account Account[]
}

model Account {
  id                 String               @id @default(uuid())
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  provider           AuthProvider         @relation(fields: [providerId], references: [id])
  providerId         String
  authProviderId     String               @default(uuid())
  type               AccountType          @relation(fields: [accountTypeId], references: [id])
  accountTypeId      String
  userName           String
  password           String?
  AccountPhoneNumber AccountPhoneNumber[]
  accessToken        String?
  refreshToken       String?
  role               Role                 @default(USER)
  avatar             String?
  verify             Boolean              @default(false)
  Order              Order[]
  shopId             Shop?
  Nofication         Nofication[]
  Cart               Cart?
  Review             Review[]
}

model ActivationToken {
  id    String @id @default(uuid())
  token String
  email String @unique
}

model AuthProvider {
  id      String    @id @default(uuid())
  name    String    @unique @default("credential")
  Account Account[]
}

model AccountType {
  id      String    @id @default(uuid())
  type    String    @unique @default("email")
  Account Account[]
}

model AccountPhoneNumber {
  id          String  @id @default(uuid())
  account     Account @relation(fields: [accountId], references: [id])
  phoneNumber String
  accountId   String
}

model Nofication {
  id      String    @id @default(uuid())
  account Account[]
  title   String
  message String
  images  String[]
}

model Cart {
  id        String     @id @default(uuid())
  Account   Account    @relation(fields: [accountId], references: [id])
  accountId String     @unique
  Product   Product[]
  CartItem  CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  Product   Product @relation(fields: [productId], references: [id])
  productId String
  Cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  quantity  Int     @default(1)
}

model Product {
  id          String      @id @default(uuid())
  promotion   Promotion   @relation(fields: [promotionId], references: [id])
  promotionId String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  shop        Shop        @relation(fields: [shopId], references: [id])
  shopId      String
  tag         Tag[]
  name        String
  description String?
  price       Float
  stock       Int
  images      String[]
  rating      Float       @default(5)
  soldOut     Int         @default(0)
  OrderItem   OrderItem[]
  Cart        Cart?       @relation(fields: [cartId], references: [id])
  cartId      String?
  CartItem    CartItem[]
  Review      Review[]
}

model Shop {
  id               String            @id @default(uuid())
  account          Account           @relation(fields: [accountId], references: [id])
  accountId        String            @unique
  address          Address           @relation(fields: [addressId], references: [id])
  addressId        String            @unique
  description      String?
  ShopPhoneNumber  ShopPhoneNumber[]
  avatar           String?
  //withDraw
  availableBalance Float             @default(0)
  Transection      Transection[]
  Product          Product[]
}

model Transection {
  id        String   @id @default(uuid())
  shop      Shop     @relation(fields: [shopId], references: [id])
  shopId    String
  amount    Float
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShopPhoneNumber {
  id          String @id @default(uuid())
  shop        Shop   @relation(fields: [shopId], references: [id])
  shopId      String
  phoneNumber String
}

model Category {
  id               String      @id @default(uuid())
  parentCategory   Category    @relation("parentRelation", fields: [parentCategoryId], references: [id])
  parentCategoryId String
  childrenCategory Category[]  @relation("parentRelation")
  name             String
  Variant          Variant[]
  promotion        Promotion[]
  Product          Product[]
}

model Variant {
  id            String          @id @default(uuid())
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    String
  VariantOption VariantOption[]
}

model VariantOption {
  id         String  @id @default(uuid())
  variant    Variant @relation(fields: [variantId], references: [id])
  variantId  String
  optionName String
}

model Order {
  id                String      @id @default(uuid())
  account           Account     @relation(fields: [accountId], references: [id])
  accountId         String
  orderDate         DateTime    @default(now())
  shippingAddress   Address?    @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  status            Status      @default(PENDING)
  OrderItem         OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  Product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)
}

model Review {
  id        String  @id @default(uuid())
  Account   Account @relation(fields: [accountId], references: [id])
  accountId String
  Product   Product @relation(fields: [productId], references: [id])
  productId String
}
